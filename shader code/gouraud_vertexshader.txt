// Vertex shader Gouraud Shading - Per-vertex lighting

uniform mat4 uMVPMatrix;
uniform mat4 uMVMatrix;
uniform mat4 normalMatrix; 
uniform vec4 lightPos;
uniform vec4 lAmbient;
uniform vec4 lDiffuse;
uniform vec4 lSpecular;
uniform vec4 matAmbient;
uniform vec4 matDiffuse;
uniform vec4 matSpecular;
uniform float matShininess;

attribute vec4 vertexPosition;
attribute vec3 vertexNormal;

varying vec4 color;

void main() {
	vec4 ecPosition = uMVMatrix * vertexPosition;
	vec3 N = normalize(vec3(normalMatrix * vec4(vertexNormal, 1.0)));
	vec3 E = normalize(-ecPosition.xyz);
	vec3 L = normalize(lightPos.xyz - ecPosition.xyz);
	vec3 R = reflect(-L, N);
	vec4 ambientTerm = lAmbient * matAmbient;
	vec4 diffuseTerm = lDiffuse * matDiffuse * max(dot(N, L), 0.0);
	vec4 specularTerm = lSpecular * matSpecular * pow(max(dot(R, E), 0.0), matShininess);
	color = ambientTerm + diffuseTerm + specularTerm;
	gl_Position = uMVPMatrix * vertexPosition;
}