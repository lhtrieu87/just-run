/**
 * @author Han Lin
 * Created by Han Lin on v0.1
 * Edited : by Han Lin on v0.3 -- change to singleton
 */
package JUST_RUN.RendererEngine;

import java.io.InputStream;
import java.util.ArrayList;

import JUST_RUN.Core.GraphicsAPI;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;

public class Texture {
	private ArrayList<Integer> m_objTexture = new ArrayList<Integer>();
	private int[] m_intTextureID;
	private Context m_objContext;
	private static Texture m_objHandle;
	
	private Texture(Context context)
	{
		m_objContext = context;
	}
	
	public static Texture getHandle(Context context)
	{
		if(m_objHandle == null)
			m_objHandle = new Texture(context);
		return m_objHandle;
	}
	
	public static Texture getHandle()
	{
		return m_objHandle;
	}
	
	public int getCount()
	{
		return m_objTexture.size();
	}
	
	/**
	 * 
	 * @param ID (Integer) : The texture resource ID. This ID is automatic generated by Android OS.
	 * @return ID (Integer) : The texture ID that corresponding to OpenGL Texture ID.
	 */
	public int addTexture(int ID)
	{
		m_objTexture.add(ID);
		return m_objTexture.size() - 1;
	}

	public int[] getTextureID()
	{
		return m_intTextureID;
	}
	
	public void SetupAll()
	{
		m_intTextureID = new int[m_objTexture.size()];
		/*
		 * Stored texture(s) to GPU memory buffer via OpenGL and stored their 
		 * corresponding returned ID to m_intTextureID array
		 */
		GraphicsAPI.generateTexture(m_objTexture.size(), m_intTextureID);
		for(int i = 0; i < m_objTexture.size(); i++) {
			/*
			 * Initialized texture parameter
			 */
			GraphicsAPI.textureInit(m_intTextureID[i]);
			/*
			 * Generate texture Bitmap
			 */
			//Bitmap bitmap = BitmapFactory.decodeResource(m_objContext.getResources(), m_objTexture.get(i));
			/*
			 * Edited by million on V0.5
			 */
			InputStream is = m_objContext.getResources().openRawResource(m_objTexture.get(i));
	        Bitmap bitmap;
	        try {
	            bitmap = BitmapFactory.decodeStream(is);
	        } 
	        finally {
	            try { is.close(); } catch(Exception e) { /* Ignore. */ }
	        }
	        if(bitmap == null)
	        	return;
			/*
			 * End edited
			 */
			/*
			 * Pass the generated bitmap to GPU
			 */
			GraphicsAPI.createTexture(bitmap);
			/*
			 * Reusing current bitmap by clear current bitmap buffer
			 */
			bitmap.recycle();
		}
	}
}
